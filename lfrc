# Luke's lf settings


# Note on Image Previews
# For those wanting image previews, like this system, there are four steps to
# set it up. These are done automatically for LARBS users, but I will state
# them here for others doing it manually.
#
# 1. ueberzug must be installed.
# 2. The scope file (~/.config/lf/scope for me), must have a command similar to
#    mine to generate ueberzug images.
# 3. A `set cleaner` line as below is a cleaner script.
# 4. lf should be started through a wrapper script (~/.local/bin/lfub for me)
#    that creates the environment for ueberzug. This command can be be aliased
#    in your shellrc (`alias lf="lfub") or if set to a binding, should be
#    called directly instead of normal lf.

# Basic vars
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set mouse false
# set hidden true
set shellopts '-eu'
set icons
set info 'size'
set incsearch
set smartcase
set ignorecase
set dircounts
set findlen 1
set tabstop 4
# set drawbox
set period 1
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"
set cleaner '~/.config/lf/cleaner'
set previewer '~/.config/lf/scope'
set autoquit true
# set autoquit on

# cmds/functions
cmd open ${{
  case $(file --mime-type "$(readlink -f $f)" -b) in
      # application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) localc $fx ;;
      application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) libreoffice $fx >/dev/null 2>&1 ;; #  NOTE: libreoffice
      # application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) et $fx >/dev/null 2>&1 ;; #  NOTE: wps spreadsheets
      image/vnd.djvu|application/pdf|application/octet-stream|application/postscript) setsid -f zathura $fx >/dev/null 2>&1 ;;
      text/*|application/json|inode/x-empty|application/x-subrip) $EDITOR $fx;;
      image/x-xcf) setsid -f gimp $f >/dev/null 2>&1 ;;
      image/svg+xml) display -- $f ;;
      image/*) rotdir $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|avif\|tif\|ico\)\(_large\)*$" |
          setsid -f nsxiv -aio 2>/dev/null | while read -r file; do
              [ -z "$file" ] && continue
              lf -remote "send select \"$file\""
              lf -remote "send toggle"
          done &
          ;;
      audio/*) mpv --audio-display=no $f ;;
      video/*) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
      application/pdf|application/vnd*|application/epub*) setsid -f zathura $fx >/dev/null 2>&1 ;;
      application/pgp-encrypted) $EDITOR $fx ;;
	    application/vnd.openxmlformats-officedocument.wordprocessingml.document|application/vnd.oasis.opendocument.text|application/vnd.openxmlformats-officedocument.spreadsheetml.sheet|application/octet-stream|application/vnd.oasis.opendocument.spreadsheet|application/vnd.oasis.opendocument.spreadsheet-template|application/vnd.openxmlformats-officedocument.presentationml.presentation|application/vnd.oasis.opendocument.presentation-template|application/vnd.oasis.opendocument.presentation|application/vnd.ms-powerpoint|application/vnd.oasis.opendocument.graphics|application/vnd.oasis.opendocument.graphics-template|application/vnd.oasis.opendocument.formula|application/vnd.oasis.opendocument.database) setsid -f libreoffice $fx >/dev/null 2>&1 ;;
      application/javascript) $EDITOR $fx ;;
      application/typescript) $EDITOR $fx ;;
      application/typescriptreact) $EDITOR $fx ;;
      *) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
  esac
}}

# cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"
cmd mkdir $mkdir -p "$@"

#  NOTE: extrat files
#  NOTE: sudo pacman -S atool

# cmd extract ${{
# 	clear; tput cup $(($(tput lines)/3)); tput bold
# 	set -f
# 	printf "%s\n\t" "$fx"
# 	printf "extract?[y/N]"
# 	read ans
# 	[ $ans = "y" ] && aunpack $fx
# }}

cmd extract ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "extract?[y/N]"
	read ans
	[ $ans = "y" ] && {
		case $fx in
			*.tar.bz2)   tar xjf $fx     ;;
			*.tar.gz)    tar xzf $fx     ;;
			*.bz2)       bunzip2 $fx     ;;
			*.rar)       unrar e $fx     ;;
			*.gz)        gunzip $fx      ;;
			*.tar)       tar xf $fx      ;;
			*.tbz2)      tar xjf $fx     ;;
			*.tgz)       tar xzf $fx     ;;
			*.zip)       unzip $fx       ;;
			*.Z)         uncompress $fx  ;;
			*.7z)        7z x $fx        ;;
			*.tar.xz)    tar xf $fx      ;;
		esac
	}
}}

# compress current file or selected files with tar
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}
# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd delete ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "delete?[y/N]"
	read ans
	[ $ans = "y" ] && rm -rf -- $fx
}}

cmd trash ${{
  set -f
  printf "Trash $fx ? [y/N]"
  read ans
  if [[ $ans == "y" ]]; then
    trash-put $fx
  fi
}}
cmd trash_clear %trash-empty
cmd trash_restore ${{
  trash-restore
}}

cmd moveto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Move to where?"
	dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
	for x in $fx; do
		eval mv -iv \"$x\" \"$dest\"
	done &&
	notify-send "ðŸšš File(s) moved." "File(s) moved to $dest."
}}

cmd copyto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Copy to where?"
	dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
	for x in $fx; do
		eval cp -ivr \"$x\" \"$dest\"
	done &&
	notify-send "ðŸ“‹ File(s) copied." "File(s) copies to $dest."
}}

cmd openwith %"$@" "$fx"
cmd setbg "$1"

#  NOTE: bulkrename

# cmd bulk-rename ${{
#     old="$(mktemp)"
#     new="$(mktemp)"
#     if [ -n "$fs" ]; then
#         fs="$(basename -a $fs)"
#     else
#         fs="$(ls)"
#     fi
#     printf '%s\n' "$fs" >"$old"
#     printf '%s\n' "$fs" >"$new"
#     $EDITOR "$new"
#     [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
#     paste "$old" "$new" | while IFS= read -r names; do
#         src="$(printf '%s' "$names" | cut -f1)"
#         dst="$(printf '%s' "$names" | cut -f2)"
#         if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
#             continue
#         fi
#         mv -- "$src" "$dst"
#     done
#     rm -- "$old" "$new"
#     lf -remote "send $id unselect"
# }}


cmd bulkrename ${{
    tmpfile_old="$(mktemp)"
    tmpfile_new="$(mktemp)"

    [ -n "$fs" ] && fs=$(basename -a $fs) || fs=$(ls)

    echo "$fs" > "$tmpfile_old"
    echo "$fs" > "$tmpfile_new"
    $EDITOR "$tmpfile_new"

    [ "$(wc -l < "$tmpfile_old")" -eq "$(wc -l < "$tmpfile_new")" ] || { rm -f "$tmpfile_old" "$tmpfile_new"; exit 1; }

    paste "$tmpfile_old" "$tmpfile_new" | while IFS="$(printf '\t')" read -r src dst
    do
        [ "$src" = "$dst" ] || [ -e "$dst" ] || mv -- "$src" "$dst"
    done

    rm -f "$tmpfile_old" "$tmpfile_new"
    lf -remote "send $id unselect"
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  touch $ans
}}

cmd chmod ${{
  printf "Mode Bits: "
  read ans

  for file in "$fx"
  do
    chmod $ans $file
  done

  lf -remote 'send reload'
}}

# autojump
cmd aj %lf -remote "send $id cd '$(autojump $1)'"

# Remove some defaults
map d
map f
map F
map t
map y
map r

# Bindings
map <c-f> $lf -remote "send $id select \"$(fzf)\""
map J $lf -remote "send $id cd $(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf)"
map gh
map gg top
map dd cut
map D trash
map x delete
map C copyto
map M moveto
map <c-r> reload
map . set hidden!
map <enter> shell
# map x $$f
map X !$f

map A :rename; cmd-end # at the very end
map c push A<c-u> # new rename
map I :rename; cmd-home # at the very beginning
map i :rename # before extension
map a :rename; cmd-right # after extension

map B bulkrename
map b $setbg $f  # ~/.local/bin/setbg

map <c-e> down
map <c-y> up
map V push :!nvim<space>


# map copy file or file name
map yy copy
map yd $dirname -- "$f" | head -c-1 | xclip -i -selection clipboard
map yp $printf "%s" "$fx" | xclip -selection clipboard
map yn $basename -a -- $fx | head -c-1 | xclip -i -selection clipboard
map ye yank-basename-without-extension


# show 1 pannel or 2 pannel
map w %lf -remote "send $id set ratios 1:2"
map W %lf -remote "send $id set ratios 1:2:3"

map o push :openwith<space>
# map o &mimeopen "$f"
# map O $mimeopen --ask "$f"
map C push :zip<space>
map R push :tar<space>
map E extract
map <c-g> push $lazygit<enter>
map <c-n> push :mkdir<space>""<left>
# map M push :mkdir<space>
map T mkfile
map gc trash_clear
map gr trash_restore
map z push :aj<space>
map Qg !clear; glow -p $fx
# map B bulk-rename
map = chmod

map S $setsid -f $TERMINAL >/dev/null 2>&1

map Y $printf "%s" "$fx" | xclip -selection clipboard

# Source Bookmarks
source "~/.config/lf/shortcutrc"
